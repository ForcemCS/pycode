# 1. None 
# 在 整个 Python 语言中被用来表示 “空” 或 “不存在”。
# 你可以把它想象成一个空盒子。它不是数字0，也不是空字符串''，它就是纯粹的“无”。
# 当一个变量还没有被赋值，或者一个函数没有返回值时，通常会用到 None。
# 在数据序列（如列表）中，它也常被用作一个占位符，表示这个位置的数据是缺失的。
# [1, 2, None, 4] 表示这个列表的第三个元素是缺失的。


# 2. NaN (Not a Number)
# 它不是用来表示“空”，而是用来表示一个 “未定义的”或“无法表示的”数学运算结果。
#   例如：0 / 0 的结果是多少？在数学上是未定义的。在浮点数运算中，这个结果就是 NaN。
#   无穷大减去无穷大 (inf - inf) 的结果也是 NaN。
# 在 Python 中如何创建：
#   float('nan'): 直接将字符串 'nan' 转换为浮点数。
#   math.nan: Python 内置数学库 math 提供的 NaN 值。
#   np.nan: 在数据科学领域，最常用的是 NumPy 库提供的 np.nan。

# 那么，如何正确判断一个值是不是 NaN？
# 必须使用专门的函数：
#   math.isnan(): Python 自带的数学库函数。
#   np.isnan(): NumPy 提供的函数，功能更强大，可以对整个数组进行判断。

# 核心区别小结：

# None 是一个通用的对象，表示“空”。
# NaN 是一个特殊的浮点数，表示“不是一个数字”的计算结果。


# 重要!!!：
# 在代码中，你永远不应该使用 x == np.nan 来判断 x 是否为 NaN。正确的做法是 math.isnan(x) 或 np.isnan(x)。


#3. Pandas 是如何处理 None 和 NaN 的 
# Pandas 是如何处理 None 和 NaN 的
# pd.Series([1, 2, None, np.nan])
# Pandas 的处理流程：
# Pandas 发现这个列表里有整数 1、2，也有缺失值 None 和 np.nan。
# 为了保持数据类型的统一和计算效率，它需要找一个能同时容纳“数字”和“缺失标记”的类型。
# 整数类型（int）无法表示 NaN。
# 只有浮点数类型（float） 可以。因为 NaN 本身就是一个特殊的浮点数。
# 因此，Pandas 做了两件事：
# 类型提升 (Upcasting)：将所有的整数（如 1, 2）都转换成浮点数（1.0, 2.0）。
# 统一缺失值：将 Python 的 None 也一并转换成浮点数标准的缺失值 NaN。
# 最终结果：得到一个 dtype=float64 的 Series，其中所有的原始值都变成了浮点数，所有的缺失值都统一用 NaN 表示。


#4. 在 Pandas 中检查缺失数据的终极方案 
# Pandas 提供了一个完美的解决方案：

# pd.isnull() (或它的别名 pd.isna())
# 这是一个通用函数：它能同时正确处理 None 和 NaN。
# 工作原理：它会对 Series 或 DataFrame 中的每个元素进行检查：
# 如果元素是 None，返回 True。
# 如果元素是 NaN，返回 True。
# 如果元素是其他任何值（数字、字符串等），返回 False。
# 优点：你再也不用关心底层的缺失值到底是 None 还是 NaN 了。只要你想找缺失数据，用 pd.isnull() 就对了。

# pd.notnull() (或它的别名 pd.notna())
# 这个函数和 isnull() 的功能完全相反。如果一个值不是缺失值（既不是 None 也不是 NaN），它就返回 True。