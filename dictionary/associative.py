#x = 10，这行代码的本质是：字符串 "x" 被关联到了整数对象 10，Python 在后台其实用一个字典存储这个关联关系。
#对象也是字典

#keys = [' ', '<', '@', 'A', 'B', ..., 'Z', 'a', 'b', ..., 'z']  
#values = [32, 60, 64, 65, 66, ..., 90, 97, 98, ..., 122]  
#kv的同一个索引有某种对应关系，还是可以使用如下的方法
#items = [('A', 65), ..., ('Z', 90), ('a', 97), ..., ('z', 122)]
#同样做的是扫描，但是这两种方法都有一个主要的缺点，必须进行逐项扫描


##Hash Maps(也称之为字典)
#查找速度（lookup speed）与字典里有多少项数据（size of dictionary）关系不大。
#这意味着，无论你的字典里存了10条数据还是100万条数据，根据键查找对应值的时间都差不多一样快（理想情况下）。这和列表（list）不同，列表查找某个元素通常会随着列表变长而变慢。
#作为字典的“键”，它必须是“可哈希的 (hashable)”。
#一个对象是可哈希的，意味着它可以被转换成一个固定的数字（称为哈希值），这个哈希值帮助字典快速定位。为了能做到这一点，这个对象在它的生命周期内不能改变（即它是不可变的）。


data = {'a': 1, 'b': 2, 'c': 3}

for key in data.keys():
    print(key)

for t   in  data.items():              #打印出多个tuple
    print(t)                                


for k, v in data.items():
    print(f"{k} = {v}")


############
#如果我们只遍历key，是按照插入顺序返回的。改变值不影响插入顺序
#删除key重新插入会改变顺序
d = {
    'key 1': 1,
    'key 2': 2,
    3.14 : 'pi'

}

d['x'] = 100

del d['key 1']
d['key 1'] = 200

for  k  in d:
    print(k)